{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactUikitBase = require('react-uikit-base');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Button = function Button(props) {\n  // CSS classes\n  var context = {\n    primary: ' uk-button-primary',\n    success: ' uk-button-success',\n    danger: ' uk-button-danger',\n    link: ' uk-button-link'\n  };\n  var size = {\n    mini: ' uk-button-mini',\n    small: ' uk-button-small',\n    large: ' uk-button-large'\n  };\n\n  var cssClassNames = _reactUikitBase.helpers.cleanClasses(['uk-button', props.classes, props.block ? 'uk-width-1-1' : null, props.context ? context[props.context] : null, props.size ? size[props.size] : null, props.className]); // Remove non valid html attributes\n\n\n  var ignoreProps = ['body', 'block', 'children', 'classes', 'context', 'kitid', 'size', 'type'];\n\n  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props); // Elements\n\n\n  var attr = _extends({}, cleanProps, (0, _reactUikitBase.events)(props), {\n    'data-kitid': props.kitid\n  });\n\n  var type = {\n    button: _react2.default.createElement('button', _extends({}, attr, {\n      className: cssClassNames,\n      type: props.type || 'button',\n      disabled: props.disabled\n    }), props.body, props.children),\n    close: _react2.default.createElement('a', _extends({}, attr, {\n      className: 'uk-close ' + cssClassNames,\n      href: '#'\n    })),\n    link: _react2.default.createElement('a', _extends({}, attr, {\n      className: cssClassNames,\n      href: '#',\n      role: 'button'\n    }), props.body, props.children)\n  }; // Return Component\n\n  return type.submit ? type['button'] : type[props.type] || type['button'];\n};\n\nButton.propTypes = {\n  body: _react2.default.PropTypes.string,\n  block: _react2.default.PropTypes.bool,\n  children: _react2.default.PropTypes.any,\n  classes: _react2.default.PropTypes.array,\n  className: _react2.default.PropTypes.string,\n  context: _react2.default.PropTypes.oneOf(['primary', 'success', 'danger', 'link']),\n  disabled: _react2.default.PropTypes.bool,\n  kitid: _react2.default.PropTypes.string,\n  size: _react2.default.PropTypes.oneOf(['mini', 'small', 'large']),\n  type: _react2.default.PropTypes.oneOf(['button', 'close', 'link', 'submit'])\n};\nexports.default = (0, _reactUikitBase.base)(Button);","map":null,"metadata":{},"sourceType":"script"}