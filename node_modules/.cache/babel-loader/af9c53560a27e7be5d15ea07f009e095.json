{"ast":null,"code":"'use strict';\n/**\n * Remove false values from a list, expect 0's\n * @param  {array} list - List of items to be filtered\n * @return {array}      - New lsit with false items removed\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.clean = clean;\nexports.cleanAll = cleanAll;\nexports.cleanObj = cleanObj;\nexports.cleanObjAll = cleanObjAll;\nexports.curry = curry;\nexports.filterObjetsInList = filterObjetsInList;\nexports.fmap = fmap;\nexports.either = either;\nexports.maybe = maybe;\nexports.maybeIf = maybeIf;\nexports.pickKeyValuesFromList = pickKeyValuesFromList;\nexports.pipe = pipe;\nexports.everyTrue = everyTrue;\nexports.someTrue = someTrue;\nexports.unique = unique;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction clean(list) {\n  return list.filter(function (e) {\n    return e === 0 ? '0' : e;\n  });\n}\n/**\n * Removes all false values from a list\n * @param  {array} list - List of items to be filtered\n * @return {array}      - New list with false items removed\n */\n\n\nfunction cleanAll(list) {\n  return list.filter(function (e) {\n    return e;\n  });\n}\n/**\n * Removes all false key/values pairs from a list, expect 0's\n * @param  {object} list - List of items to be filtered\n * @return {object}      - New list with false items removed\n */\n\n\nfunction cleanObj(obj) {\n  Object.keys(obj).forEach(function (key) {\n    return obj[key] && _typeof(obj[key]) === 'object' && cleanObj(obj[key]) || (obj[key] === undefined || obj[key] === null) && delete obj[key];\n  });\n  return obj;\n}\n/**\n * Removes all key/values pairs values from a list\n * @param  {object} list - List of items to be filtered\n * @return {object}      - New list with false items removed\n */\n\n\nfunction cleanObjAll(obj) {\n  Object.keys(obj).forEach(function (key) {\n    return obj[key] && _typeof(obj[key]) === 'object' && cleanObj(obj[key]) || (obj[key] === null || obj[key] === undefined || obj[key] === 0) && delete obj[key];\n  });\n  return obj;\n}\n\nfunction curry(fn) {\n  return function curried() {\n    return fn.apply(this, arguments);\n  };\n}\n/**\n*  Filters a list of objects by using another list of objects as the criteria\n*  @param  {function}  fn(criteria, search)  Function to filter criteria from searh\n*  @param  {array}     criteria              List of objects to us as the criteria\n*  @param  {array}     search                List of objects to be searhed\n*  @return {array}                           New list of objects with only filterd properties\n*/\n\n\nfunction filterObjetsInList(fn, criteria, search) {\n  return curry(function () {\n    return clean(criteria.map(function (c) {\n      return search.map(function (s) {\n        return fn(c, s);\n      });\n    })[0]);\n  });\n}\n/**\n* Maps a function over a container and returns a new container\n* @param  {function} function to be applied to value\n* @param  {[object]}\n* @param  {[type]}\n* @return {[type]}     value to be mapped\n*/\n\n\nfunction fmap(f, container, val) {\n  if (val == null) {\n    return curry(function () {\n      return container(null);\n    });\n  }\n\n  ;\n  return curry(function () {\n    return container(f(val));\n  });\n}\n/**\n * Executes left if any of the condition are true, else right if false.\n * @param  {any}   left        If true.\n * @param  {any}   right       If fasle.\n * @param  {array} conditions  Array of conditions to be evaluated.\n * @return {any}               Execute left if true else right if false.\n */\n\n\nfunction either(left, right) {\n  return curry(function (conditions) {\n    var conditionsBool = Array.isArray(conditions) ? conditions.map(function (c) {\n      return Boolean(c);\n    }).some(function (b) {\n      return b === true;\n    }) : Boolean(conditions);\n    if (conditionsBool) return typeof left === 'function' ? left() : left;\n    return typeof right === 'function' ? right() : right;\n  });\n}\n/**\n* Create a container with an immutabe value or returns null if no value passed.\n* @param  {any}  value      Value to be returned if true.\n* @param  {any}  emptyType  Value to be returned if false value param is null/undefined. Default is null.\n* @return {any}             Returns value or emptyType.\n*/\n\n\nfunction maybe() {\n  var emptyType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return curry(function (value) {\n    return value == null ? emptyType : value;\n  });\n}\n/**\n* Create a container with an immutabe value or returns null if no value passed.\n* @param  {any}    value      Value to be returned if true\n* @param  {bool}   condition  Condition to be evaluated. Default is false.\n* @param  {any}    emptyType  Value to be returned if false value param is null/undefined. Default is null\n* @return {any}               Returns value or emptyType based on condition.\n*/\n\n\nfunction maybeIf(value) {\n  return curry(function () {\n    var condition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var emptyType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return !condition ? emptyType : value;\n  });\n}\n/**\n* @param  {array} propsList    List of key name to be picked.\n* @param  {array} objectsList  List of objects.\n* @return {array}              New array of objects only containing the picked items.\n*/\n\n\nfunction pickKeyValuesFromList(propsList, objectsList) {\n  return objectsList.map(function (obj) {\n    function pickAll(propsList, obj) {\n      var result = {};\n\n      for (var idx = 0; idx < propsList.length; idx++) {\n        var propItem = propsList[idx];\n        result[propItem] = obj[propItem];\n      }\n\n      return result;\n    }\n\n    ;\n    return pickAll(propsList, obj);\n  });\n}\n\nfunction pipe() {\n  var fns = [].slice.call(arguments);\n  return curry(function (initalValue) {\n    function reducer(prev, curr) {\n      return curr(prev);\n    }\n\n    return fns.reduce(reducer, initalValue);\n  });\n}\n\nfunction everyTrue() {\n  return [].concat(Array.prototype.slice.call(arguments)).every(function (e) {\n    return Boolean(e);\n  });\n}\n\nfunction someTrue() {\n  return [].concat(Array.prototype.slice.call(arguments)).some(function (e) {\n    return Boolean(e);\n  });\n}\n\nfunction unique(array) {\n  return [].concat(_toConsumableArray(new Set(array)));\n}\n\nvar utils = {\n  clean: clean,\n  cleanAll: cleanAll,\n  cleanObj: cleanObj,\n  cleanObjAll: cleanObjAll,\n  curry: curry,\n  filterObjetsInList: filterObjetsInList,\n  fmap: fmap,\n  either: either,\n  everyTrue: everyTrue,\n  maybe: maybe,\n  maybeIf: maybeIf,\n  pickKeyValuesFromList: pickKeyValuesFromList,\n  pipe: pipe,\n  someTrue: someTrue\n};\nexports.default = utils;","map":null,"metadata":{},"sourceType":"script"}